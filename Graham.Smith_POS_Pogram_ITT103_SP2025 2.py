# -*- coding: utf-8 -*-
"""Graham.Smith-POS_Program-ITT103-SP2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cs3W_b57IHfaoGF27z2ZwAHL1dFI7zkP
"""

"""
Description: Point of sale (POS) System for Best Buy Retail Store.
This program allows cashiers to manage sales transactions by:
- Managing a product catalog
- Adding and removing items from a shopping cart
- Viewing the cart
- Calculating totals with tax and discount
- Processing payments and generating receipts
"""

# Creating a predefined product catalog for the POS system.
product_catalog = {
    "Fan": {"price": 1500.50, "stock": 20},
    "Bread": {"price": 650.90, "stock": 15},
    "Lotion": {"price": 300.00, "stock": 10},
    "Eggs": {"price": 250.00, "stock": 5},
    "Rice": {"price": 350.00, "stock": 8},
    "Sugar": {"price": 400.00, "stock": 12},
    "Salt": {"price": 200.00, "stock": 25},
    "Iron": {"price": 6000.00, "stock": 9},
    "Handbag": {"price": 355.00, "stock": 6},
    "Pen": {"price": 50.50, "stock": 4}   # Low-stock alert example
}
# Using {} to create an empty dictionary for the cart so cashier can add items.
cart = {}

# Displaying the  Product Catalog
def display_catalog():
    print("\nAvailable Products:")
#Formatting the strings and aligning the character and space.
    print("{:<10} {:<7} {:<7}".format("Product", "Price($)", "Stock"))
    for product, details in product_catalog.items():
        stock_status = " (Low Stock!)" if details["stock"] < 5 else ""
        print(f"{product:<10} {details['price']:<7.2f} {details['stock']}{stock_status}")

# Allowing the cashier to add items to the cart.
def add_to_cart():
#Prompting cashier to enter product name.
    product = input("\nEnter product name: ").title()
    if product in product_catalog:
#Prompting cashier to enter quantity and using the int function.
        quantity = int(input(f"Enter quantity for {product}: "))
#Checking stock availability after product and quantity are entered
        if 0 < quantity <= product_catalog[product]["stock"]:
            cart[product] = cart.get(product, 0) + quantity
            product_catalog[product]["stock"] -= quantity
            print(f"{quantity} {product}(s) added to cart.")
        else:
            print("Invalid quantity! Check stock availability.")
    else:
        print("Product not found.")

#Allowing the cashier to remove items from cart
def remove_from_cart():
#Prompting the cashier to enter name of product that they wish to remove.
    product = input("\nEnter product name to remove: ").title()
    if product in cart:
#Prompting cashier to enter the quantity of the product they wish to remove.
        quantity = int(input(f"Enter quantity to remove: "))
        if 0 < quantity <= cart[product]:
            cart[product] -= quantity
            product_catalog[product]["stock"] += quantity
            if cart[product] == 0:
#Removing the item from the cart.
                del cart[product]
            print(f"{quantity} {product}(s) removed from cart.")
        else:
            print("Invalid quantity!")
    else:
        print("Item not in cart.")

#Alllowing the cashier to view cart.
def view_cart():
    if not cart:
        print("\nCart is empty.")
        return
    print("\nShopping Cart:")
    print("{:<10} {:<7} {:<7} {:<7}".format("Product", "Qty", "Price($)", "Total($)"))
    subtotal = 0
    for product, qty in cart.items():
        price = product_catalog[product]["price"]
        total_price = qty * price
        subtotal += total_price
        print(f"{product:<10} {qty:<7} {price:<7.2f} {total_price:<7.2f}")
    print(f"\nSubtotal: ${subtotal:.2f}")

# Handling checkout processes & applying tax and discount for payment.
def checkout():
    if not cart:
        print("\nCart is empty. Add items first!")
        return

    subtotal = sum(cart[product] * product_catalog[product]["price"] for product in cart)
    tax = subtotal * 0.10
    discount = subtotal * 0.05 if subtotal > 6000 else 0
    total = subtotal + tax - discount

    print("\nCheckout Summary:")
    print(f"Subtotal: ${subtotal:.2f}")
    print(f"Sales Tax (10%): ${tax:.2f}")
    if discount > 0:
        print(f"Discount (5% on $5000+): -${discount:.2f}")
    print(f"Total Due: ${total:.2f}")

    while True:
        try:
            amount_paid = float(input("Enter amount received: $"))
            if amount_paid >= total:
                change = amount_paid - total
                print(f"Change to return: ${change:.2f}")
                generate_receipt(subtotal, tax, discount, total, amount_paid, change)
                cart.clear()
                break
            else:
                print("Insufficient payment. Try again.")
        except ValueError:
            print("Invalid input! Enter a valid amount.")

# Generating receipt for the customer.
def generate_receipt(subtotal, tax, discount, total, paid, change):
    print("\n========== Best Buy Retail Store ==========")
    print("Item         Qty    Price($)    Total($)")
    for product, qty in cart.items():
        price = product_catalog[product]["price"]
        total_price = qty * price
        print(f"{product:<12} {qty:<5} {price:<10.2f} {total_price:<10.2f}")
    print(f"\nSubtotal: ${subtotal:.2f}")
    print(f"Sales Tax: ${tax:.2f}")
    if discount > 0:
        print(f"Discount: -${discount:.2f}")
    print(f"Total Due: ${total:.2f}")
    print(f"Amount Paid: ${paid:.2f}")
    print(f"Change: ${change:.2f}")
    print("=========== Thank You for Shopping! ===========\n")

'''Main Menu Loop. Creating a while loop for the cashier to be able to go over
 the POS system options as many times as they wish'''
def main():
    while True:
        print("\n===== POS SYSTEM MENU =====")
        print("1. View Product Catalog")
        print("2. Add Item to Cart")
        print("3. Remove Item from Cart")
        print("4. View Cart")
        print("5. Checkout")
        print("6. Exit")
#Allowing the cashier to choose from POS sytem options.

        choice = input("Select an option (1-6): ")

        if choice == "1":
            display_catalog()
        elif choice == "2":
            add_to_cart()
        elif choice == "3":
            remove_from_cart()
        elif choice == "4":
            view_cart()
        elif choice == "5":
            checkout()
        elif choice == "6":
            print("Exiting POS System. Have a great day!")
            break
        else:
            print("Invalid choice! Please enter a number between 1-6.")

# Running the Program
if __name__ == "__main__":
    main()


"""I CERTIFY THAT I HAVE NOT GIVEN OR RECEIVED ANY UNATHORIZED ASSISTANCE ON THIS ASSIGNMENT"""
""" A.Smith & J.Graham"""
